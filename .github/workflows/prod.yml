name: PROD

on:
  push:
    tags:
      - 'v*.*.*-iaas'
      - 'v*.*.*-caas'
jobs:

  determine-type:
    runs-on: ubuntu-latest
    outputs:
      deploy_type: ${{ steps.set-type.outputs.deploy_type }}
    steps:
      - id: set-type
        run: |
          if [[ "${GITHUB_REF_NAME}" == *"-iaas" ]]; then
            echo "deploy_type=iaas" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == *"-caas" ]]; then
            echo "deploy_type=caas" >> $GITHUB_OUTPUT
          else
            echo "Unknown deployment type"
            exit 1
          fi
          echo "Detected deployment type: ${GITHUB_REF_NAME}"

  
  terraform-apply:
    needs: determine-type
    runs-on: self-hosted
    env:
      DEPLOY_TYPE: ${{ needs.determine-type.outputs.deploy_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Export Azure credentials
        run: |
          echo "ARM_CLIENT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      # ───── IAAS ─────
      - name: Terraform Apply (IAAS)
        if: needs.determine-type.outputs.deploy_type == 'iaas'
        working-directory: infra_iaas
        run: |
          echo "Deploying IAAS PROD..."
          terraform init -backend-config="path=terraform/prod/iaas"
          terraform validate
          terraform plan -var-file="prod.tfvars"
          terraform apply -auto-approve -var-file="prod.tfvars"
          terraform output -raw public_ip > vm_ip.txt

      # ───── CAAS ─────
      - name: Terraform Apply (CAAS)
        if: needs.determine-type.outputs.deploy_type == 'caas'
        working-directory: infra_caas
        env:
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "Deploying CAAS PROD..."
          terraform init -backend-config="path=terraform/prod/caas"
          terraform validate
          terraform plan
          terraform apply -auto-approve
          terraform output -raw public_ip > vm_ip.txt

      - name: Upload inventory.ini as artifact
        if: needs.determine-type.outputs.deploy_type == 'iaas'
        uses: actions/upload-artifact@v4
        with:
          name: inventory-file-prod
          path: infra_iaas/inventory_prod.ini

      - name: Upload VM IP
        if: needs.determine-type.outputs.deploy_type == 'iaas'
        uses: actions/upload-artifact@v4
        with:
          name: prod-vm-ip
          path: infra_iaas/vm_ip.txt

  ansible:
    if: needs.determine-type.outputs.deploy_type == 'iaas'
    needs: terraform-apply
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download inventory artifact
        uses: actions/download-artifact@v4
        with:
          name: inventory-file-prod
          path: ansible   # where to place the downloaded file


      - name: Download VM IP artifact
        uses: actions/download-artifact@v4
        with:
          name: prod-vm-ip
          path: ~/vm

      - name: Read VM IP
        id: vm
        run: |
          VM_IP=$(grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/vm/vm_ip.txt | head -n 1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not extract VM IP"
            exit 1
          fi
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
          echo "Using VM IP: $VM_IP"

      - name: Setup SSH
        env:
          CI_SSH_KEY: ${{ secrets.CI_SSH_KEY_PROD }}
        run: |
          mkdir -p ~/.ssh
          echo "$CI_SSH_KEY" > ~/.ssh/id_rsa_tcloud_prod
          chmod 600 ~/.ssh/id_rsa_tcloud_prod
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts

      - name: Run Ansible playbook
        working-directory: ansible
        run: ansible-playbook playbook.yml -i inventory_prod.ini --skip-tags dev
