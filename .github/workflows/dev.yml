name: DEV

on:

  pull_request:
    branches: [ dev, main ]

jobs:
  Lint:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: lint App
        run: find ./sample-app-master -type f -name "*.php" -exec php -l {} \;


  terraform-apply:
    needs: Lint
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7   # use a valid version (Terraform 1.13.0 does NOT exist)
      
      - name: Export Azure Service Principal creds for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV


      - name: Create VM
        working-directory: infra
        run: | 
          echo "developer_name=${{ github.actor }}"
          terraform init -backend-config="path=terraform/dev/${{ github.actor }}"
          terraform validate
          terraform plan  -var-file="dev.tfvars"
          terraform apply -auto-approve -var-file="dev.tfvars" 
          touch vm_ip.txt
          terraform output -raw public_ip > vm_ip.txt
          terraform output -raw public_ip

      - name: Upload inventory.ini as artifact
        uses: actions/upload-artifact@v4
        with:
          name: inventory-file-dev
          path: infra/inventory_dev.ini

      - name: Upload VM IP
        uses: actions/upload-artifact@v4
        with:
          name: vm-ip
          path: infra/vm_ip.txt

  ansible:
    needs: terraform-apply
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download inventory artifact
        uses: actions/download-artifact@v4
        with:
          name: inventory-file-dev
          path: ansible   # where to place the downloaded file

      - name: Download VM IP artifact
        uses: actions/download-artifact@v4
        with:
          name: vm-ip
          path: ~/vm

      - name: Read VM IP
        id: vm
        run: |
          VM_IP=$(grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/vm/vm_ip.txt | head -n 1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not extract VM IP"
            exit 1
          fi
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
          echo "Using VM IP: $VM_IP"

      - name: Setup SSH
        env:
          CI_SSH_KEY: ${{ secrets.CI_SSH_KEY }}
        run: |
          id
          mkdir -p ~/.ssh
          echo "$CI_SSH_KEY" > ~/.ssh/id_rsa_tcloud
          chmod 600 ~/.ssh/id_rsa_tcloud
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts

      - name: Run Ansible playbook
        working-directory: ansible
        run: ansible-playbook playbook.yml -i inventory_dev.ini

  stress-test:
    needs: ansible
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download VM IP artifact
        uses: actions/download-artifact@v4
        with:
          name: vm-ip
          path: ~/vm

      - name: Read VM IP
        id: vm
        run: |
          VM_IP=$(grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' ~/vm/vm_ip.txt | head -n 1)
          if [ -z "$VM_IP" ]; then
            echo "Error: Could not extract VM IP"
            exit 1
          fi
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
          echo "Using VM IP: $VM_IP"

      - name: Run k6 stress test
        run: |
          mkdir -p k6-results
          chmod 777 k6-results
          docker run --rm -i \
            -v $PWD/k6-results:/k6-results \
            -e TARGET=http://${{ env.VM_IP }}:8081 \
            grafana/k6:latest run - < k6-stress-test/stress_test.js

      - name: Upload k6 HTML report
        uses: actions/upload-artifact@v4
        with:
          name: k6-html-report-stress-test
          path: k6-results/report.html

  terraform-destroy:
    needs: stress-test
    runs-on: self-hosted
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 
          
      - name: Export Azure Service Principal creds for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Destroy VM
        working-directory: infra
        run: | 
          ls
          terraform init -backend-config="path=terraform/dev/${{ github.actor }}"
          terraform destroy  -auto-approve -var-file="dev.tfvars" 
  
